const introTxt = "Click in here to draw, Select rule-sets with [A-Z] keys, Navigate with arrow keys, Hold [Shift] to see key mappings.";
const aboutThisTxt = "This is a 2-D Cellular Automaton grid with a variable number of 'alive' states and rules, which define transition.";
const aboutMeTxt = "I'm a developer and musician from Kansas City. __Thanks for__ stopping by! _______ ________ _______ -Joel";

// prepare a i by j pixel map for the CA to read in with patternFill,
// with a tiny font on it and a buncha words etc.
// Note: fill space with underscores.
// Returns a 2d array.


function textToPixels(text, winWidth, winHeight, pxlFont) {
	const FONTHEIGHT = pxlFont.fontHeight;
	let cells = []; // create empty cell window
	for (let i = 0; i < winWidth; i++) {
		cells.push(new Array(winWidth).fill(0));
	};
	// turn text into a collection of pixelated words - each a 2x array
	let words = text.split(' ').map(function(word) {
		let wordPxls = [];
		for (let i = 0; i < FONTHEIGHT; i++) {
			let row = [];
			for (let j = 0; j < word.length; j++) {
				let ltrRow = pxlFont[word[j]][i];
				for (let k = 0; k < ltrRow.length; k++) {
					row.push(ltrRow[k]);
				}
				row.push(0); // space between letters
			}
			row.push(0, 0); // space between words
			wordPxls.push(row);
		};
		return wordPxls;
	});

	// start copying words into window sized array.
	// Assume there won't be too many to fit on the screen vertically.
	let corner = {
		x: 2,
		y: 5
	};
	let w = 0;
	while (w < words.length) {
		let wrd = words[w];
		let wordWidth = wrd[0].length;
		if (corner.x + wordWidth < winWidth) {
			let x, y;
			({
				x,
				y
			} = corner);
			for (let i = 0; i < FONTHEIGHT; i++) { // copy word into cells
				for (let j = 0; j < wordWidth; j++) { //
					if (wrd[i][j] === 0) {
						cells[i + y][j + x] = 0;
					} else {
						cells[i + y][j + x] = 2;
					}
				}
			}
			corner.x += wordWidth;
			w++;
		}
		// when a word won't fit horizontally, do a 'newline' ()
		if ((corner.x + wordWidth >= winWidth) || (w === words.length)) {
			// halfway-wrap the current line back around, to center-justify.
			let numShifts = Math.floor((winWidth - corner.x) / 2);
			for (let i = 0; i < numShifts; i++) {
				for (let j = 0; j < FONTHEIGHT; j++) {
					cells[corner.y + j].unshift(cells[corner.y + j].pop());
				}
			};
			corner.x = 2; // carriage return
			corner.y += 8; // line feed

		}
	}
	return cells;
};

var pxlFont0 = {
	fontHeight: 6,

	'A': [
		[0, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 1, 1, 1],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'B': [
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'C': [
		[0, 1, 1],
		[1, 0, 0],
		[1, 0, 0],
		[1, 0, 0],
		[0, 1, 1],
		[0, 0, 0]
	],

	'D': [
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'E': [
		[1, 1, 1],
		[1, 0, 0],
		[1, 1, 1],
		[1, 0, 0],
		[1, 1, 1],
		[0, 0, 0]
	],

	'F': [
		[1, 1, 1],
		[1, 0, 0],
		[1, 1, 1],
		[1, 0, 0],
		[1, 0, 0],
		[0, 0, 0]
	],

	'G': [
		[0, 1, 1, 1],
		[1, 0, 0, 0],
		[1, 0, 1, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 0]
	],

	'H': [
		[1, 0, 1],
		[1, 0, 1],
		[1, 1, 1],
		[1, 0, 1],
		[1, 0, 1],
		[0, 0, 0]
	],

	'I': [
		[1, 1, 1],
		[0, 1, 0],
		[0, 1, 0],
		[0, 1, 0],
		[1, 1, 1],
		[0, 0, 0]
	],

	'J': [
		[0, 0, 1, 1],
		[0, 0, 0, 1],
		[0, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'K': [
		[1, 0, 0, 1],
		[1, 0, 1, 0],
		[1, 1, 0, 0],
		[1, 0, 1, 0],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'L': [
		[1, 0, 0],
		[1, 0, 0],
		[1, 0, 0],
		[1, 0, 0],
		[1, 1, 1],
		[0, 0, 0]
	],

	'M': [
		[1, 0, 0, 0, 1],
		[1, 1, 0, 1, 1],
		[1, 0, 1, 0, 1],
		[1, 0, 0, 0, 1],
		[1, 0, 0, 0, 1],
		[0, 0, 0, 0, 0]
	],

	'N': [
		[1, 0, 0, 1],
		[1, 1, 0, 1],
		[1, 0, 1, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'O': [
		[0, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'P': [
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[1, 0, 0, 0],
		[0, 0, 0, 0]
	],

	'Q': [
		[0, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
		[0, 0, 0, 1]
	],

	'R': [
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'S': [
		[0, 1, 1, 1],
		[1, 0, 0, 0],
		[0, 1, 1, 0],
		[0, 0, 0, 1],
		[1, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'T': [
		[1, 1, 1],
		[0, 1, 0],
		[0, 1, 0],
		[0, 1, 0],
		[0, 1, 0],
		[0, 0, 0]
	],

	'U': [
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'V': [
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 1, 0],
		[1, 0, 1, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]
	],

	'W': [
		[1, 0, 0, 0, 1],
		[1, 0, 1, 0, 1],
		[1, 0, 1, 0, 1],
		[1, 0, 1, 0, 1],
		[0, 1, 0, 1, 0],
		[0, 0, 0, 0, 0]
	],

	'X': [
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'Y': [
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 1],
		[0, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'Z': [
		[1, 1, 1],
		[0, 0, 1],
		[0, 1, 0],
		[1, 0, 0],
		[1, 1, 1],
		[0, 0, 0]
	],
	'.': [
		[0],
		[0],
		[0],
		[0],
		[1],
		[0]
	],
	'!': [
		[1],
		[1],
		[1],
		[0],
		[1],
		[0]
	],
	':': [
		[0],
		[1],
		[0],
		[1],
		[0],
		[0]
	],
	"'": [
		[1],
		[1],
		[0],
		[0],
		[0],
		[0]
	],
	'?': [
		[1, 0],
		[0, 1],
		[1, 1],
		[0, 0],
		[1, 0],
		[0, 0]
	],

	',': [
		[0, 0],
		[0, 0],
		[0, 0],
		[0, 0],
		[0, 1],
		[1, 0]
	],

	'2': [
		[1, 1, 1, 0],
		[0, 0, 0, 1],
		[0, 1, 1, 0],
		[1, 0, 0, 0],
		[1, 1, 1, 1],
		[0, 0, 0, 0]
	],

	'a': [
		[0, 0, 0, 0],
		[0, 1, 1, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 0]
	],

	'b': [
		[1, 0, 0, 0],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'c': [
		[0, 0, 0],
		[0, 1, 1],
		[1, 0, 0],
		[1, 0, 0],
		[0, 1, 1],
		[0, 0, 0]
	],

	'd': [
		[0, 0, 0, 1],
		[0, 1, 1, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 0]
	],

	'e': [
		[0, 0, 0, 0],
		[0, 1, 1, 0],
		[1, 0, 1, 1],
		[1, 1, 0, 0],
		[0, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'f': [
		[0, 0, 1],
		[0, 1, 0],
		[1, 1, 1],
		[0, 1, 0],
		[0, 1, 0],
		[0, 0, 0]
	],

	'g': [
		[0, 1, 1, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 1],
		[0, 1, 1, 0]
	],

	'h': [
		[1, 0, 0, 0],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'i': [
		[1],
		[0],
		[1],
		[1],
		[1],
		[0]
	],

	'j': [
		[0, 1],
		[0, 0],
		[0, 1],
		[0, 1],
		[0, 1],
		[1, 0]
	],

	'k': [
		[1, 0, 0, 0],
		[1, 0, 0, 1],
		[1, 0, 1, 0],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'l': [
		[1],
		[1],
		[1],
		[1],
		[1],
		[0]
	],

	'm': [
		[0, 0, 0, 0, 0],
		[1, 1, 1, 1, 0],
		[1, 0, 1, 0, 1],
		[1, 0, 1, 0, 1],
		[1, 0, 1, 0, 1],
		[0, 0, 0, 0, 0]
	],

	'n': [
		[0, 0, 0, 0],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 0, 0, 0]
	],

	'o': [
		[0, 0, 0, 0],
		[0, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
		[0, 0, 0, 0]
	],

	'p': [
		[0, 0, 0, 0],
		[1, 1, 1, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 1, 1, 0],
		[1, 0, 0, 0]
	],

	'q': [
		[0, 0, 0, 0],
		[0, 1, 1, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 1]
	],

	'r': [
		[0, 0, 0],
		[1, 0, 1],
		[1, 1, 0],
		[1, 0, 0],
		[1, 0, 0],
		[0, 0, 0]
	],

	's': [
		[0, 0, 0, 0],
		[0, 1, 1, 1],
		[1, 1, 0, 0],
		[0, 0, 1, 1],
		[1, 1, 1, 0],
		[0, 0, 0, 0]
	],

	't': [
		[0, 1, 0],
		[1, 1, 1],
		[0, 1, 0],
		[0, 1, 0],
		[0, 0, 1],
		[0, 0, 0]
	],

	'u': [
		[0, 0, 0, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 0]
	],

	'v': [
		[0, 0, 0, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[1, 0, 1, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]
	],

	'w': [
		[0, 0, 0, 0, 0],
		[1, 0, 1, 0, 1],
		[1, 0, 1, 0, 1],
		[0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0],
		[0, 0, 0, 0, 0]
	],

	'x': [
		[0, 0, 0],
		[1, 0, 1],
		[0, 1, 0],
		[0, 1, 0],
		[1, 0, 1],
		[0, 0, 0]
	],

	'y': [
		[0, 0, 0, 0],
		[1, 0, 0, 1],
		[1, 0, 0, 1],
		[0, 1, 1, 1],
		[0, 0, 0, 1],
		[0, 1, 1, 0]
	],

	'z': [
		[0, 0, 0, 0],
		[1, 1, 1, 1],
		[0, 0, 1, 0],
		[0, 1, 0, 0],
		[1, 1, 1, 1],
		[0, 0, 0, 0]
	],

	'[': [
		[1, 1],
		[1, 0],
		[1, 0],
		[1, 0],
		[1, 1],
		[0, 0]
	],

	']': [
		[1, 1],
		[0, 1],
		[0, 1],
		[0, 1],
		[1, 1],
		[0, 0]
	],

	'-': [
		[0, 0],
		[0, 0],
		[1, 1],
		[0, 0],
		[0, 0],
		[0, 0]
	],
	'_': [
		[0, 0, 0, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0]
	]
};